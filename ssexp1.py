# -*- coding: utf-8 -*-
"""SSExp1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b5NgWE_ruU7uXWkewrss59gxO2D320cv

Substitution Cipher Text
"""

import string
all_letters = string.ascii_letters

dict1 = {}
key = 4

for j in range(len(all_letters)):
  dict1[all_letters[j]] = all_letters[(j + key)%len(all_letters)]

plain_txt = "I am studying Data Encryption"
cipher_txt = []

for char in plain_txt:
  if char in all_letters:
    temp = dict1[char]
    cipher_txt.append(temp)
  else:
    temp = char
    cipher_txt.append(temp)

cipher_txt = "".join(cipher_txt)
print("Cipher Text: ", cipher_txt)

import string
all_letters = string.ascii_letters
cipher_txt = "M eq wxyhCmrk Hexe IrgvCtxmsr"
dict2 = {}
key = 4
for j in range(len(all_letters)):
  dict2[all_letters[j]] = all_letters[(j - key)%(len(all_letters))]

decrypt_txt = []

for char in cipher_txt:
  if char in all_letters:
    temp = dict2[char]
    decrypt_txt.append(temp)
  else:
    temp = char
    decrypt_txt.append(temp)

decrypt_txt = "".join(decrypt_txt)
print("Decrypted Text: ", decrypt_txt)

import random,sys

LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

def main():
  message = ''
  message = input("Enter your message: ")
  mode = input("E for Encrypt, D for Decrypt: ")
  key = ""

  while checkKey(key) is False:
    key = input("Enter 26 ALPHA key (leave blank for random key): ")
    if key == '':
      key = getRandomKey()
      translated = translateMessage(message, key, mode)
  print('Using key: %s' % (key))
  print('Result: ' + translated)



def checkKey(key):
  keyString = ''.join(sorted(list(key)))
  return keyString == LETTERS

def translateMessage(message, key, mode):
  translated = ''
  charsA = LETTERS
  charsB = key

  if mode == 'D':
    charsA, charsB = charsB, charsA
  for symbol in message:
    if symbol.upper() in charsA:
      symIndex = charsA.find(symbol.upper())
      if symbol.isupper():
        translated += charsB[symIndex].upper()
      else:
        translated += charsB[symIndex].lower()
    else:
      translated += symbol
  return translated


def getRandomKey():
  randomList = list(LETTERS)
  random.shuffle(randomList)
  return ''.join(randomList)

if __name__ == '__main__':
  main()

import random, sys

LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

def main():
    message = input("Enter your message: ")
    mode = input("E for Encrypt, D for Decrypt: ")
    key = ""
    translated = ""

    while True:
        key = input("Enter 26 ALPHA key (leave blank for random key): ")
        if key == '':
            key = getRandomKey()
            print(f'Using key: {key}')
            translated = translateMessage(message, key, mode)
            print('Result:', translated)
            break
        elif checkKey(key):
            translated = translateMessage(message, key, mode)
            print('Result:', translated)
            break
        else:
            print("Invalid key. Please ensure the key is 26 letters and contains each letter of the alphabet exactly once.")

def checkKey(key):
    keyString = ''.join(sorted(list(key)))
    return keyString == LETTERS

def translateMessage(message, key, mode):
    translated = ''
    charsA = LETTERS
    charsB = key

    if mode == 'D':
        charsA, charsB = charsB, charsA
    for symbol in message:
        if symbol.upper() in charsA:
            symIndex = charsA.find(symbol.upper())
            if symbol.isupper():
                translated += charsB[symIndex].upper()
            else:
                translated += charsB[symIndex].lower()
        else:
            translated += symbol
    return translated

def getRandomKey():
    randomList = list(LETTERS)
    random.shuffle(randomList)
    return ''.join(randomList)

if __name__ == '__main__':
    main()

"""Transposition Cipher Text"""

def split_len(seq, length):
  return [seq[i:i + length] for i in range(0, len(seq), length)]

def encode(key, plaintext):
  order = {
      int(val): num for num, val in enumerate(key)
  }
  ciphertext = ''

  for index in sorted(order.keys()):
    for part in split_len(plaintext, len(key)):
      try:
        ciphertext += part[order[index]]
      except IndexError:
        continue
  return ciphertext

print(encode('3124', 'Hello World'))

!sudo apt-get install xsel # Install xsel if not installed already.
!xsel --clipboard # Start xsel

!pip install pyperclip

import pyperclip
def main():
  myMessage = 'Transposition Cipher'
  myKey = 10
  ciphertext = encryptMessage(myKey, myMessage)
  print("Cipher Text is")
  print(ciphertext + '|')

def encryptMessage(key, message):
  ciphertext = [''] * key
  for col in range(key):
    position = col
    while position < len(message):
      ciphertext[col] += message[position]
      position += key
  return ''.join(ciphertext)

if __name__ == '__main__':
  main()

import math, pyperclip
def main():
  myMessage = 'Toners raiCntisippoh'
  myKey = 6
  plaintext = decryptMessage(myKey, myMessage)
  print("Plain Text is")
  print('Transposition Cipher')

def decryptMessage(key, message):
  numOfColumns = math.ceil(len(message) / key)
  numOfRows = key
  numOfShadedBoxes = (numOfColumns * numOfRows) - len(message)
  plaintext = [''] * numOfColumns
  col = 0
  row = 0
  for symbol in message:
    plaintext[col] += symbol
    col += 1
    if (col == numOfColumns) or (col == numOfColumns - 1 and row >= numOfRows - numOfShadedBoxes):
      col = 0
      row += 1
      return ''.join(plaintext)

if __name__ == '__main__':
  main()